/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    bigint<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    /**
     * Represents NULL values
     */
    void<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Void";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     */
    bigint<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * Represents NULL values
     */
    void<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Void";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  pricing_plan_interval: "day" | "month" | "week" | "year"
  pricing_type: "one_time" | "recurring"
  subscription_status: "active" | "canceled" | "incomplete" | "incomplete_expired" | "past_due" | "trialing" | "unpaid"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  DateTime: any
  Json: any
  Void: any
}

export interface NexusGenObjects {
  Mutation: {};
  Post: { // root type
    content?: string | null; // String
    id?: number | null; // Int
    published?: boolean | null; // Boolean
    title?: string | null; // String
  }
  Query: {};
  customers: { // root type
    id: string; // ID!
    stripe_customer_id?: string | null; // String
  }
  prices: { // root type
    active?: boolean | null; // Boolean
    currency?: string | null; // String
    description?: string | null; // String
    id: string; // ID!
    interval?: NexusGenEnums['pricing_plan_interval'] | null; // pricing_plan_interval
    interval_count?: number | null; // Int
    metadata?: NexusGenScalars['Json'] | null; // Json
    product_id?: string | null; // String
    trial_period_days?: number | null; // Int
    type?: NexusGenEnums['pricing_type'] | null; // pricing_type
    unit_amount?: NexusGenScalars['BigInt'] | null; // BigInt
  }
  products: { // root type
    active?: boolean | null; // Boolean
    description?: string | null; // String
    id: string; // ID!
    image?: string | null; // String
    metadata?: NexusGenScalars['Json'] | null; // Json
    name?: string | null; // String
  }
  subscriptions: { // root type
    cancel_at?: NexusGenScalars['DateTime'] | null; // DateTime
    cancel_at_period_end?: boolean | null; // Boolean
    canceled_at?: NexusGenScalars['DateTime'] | null; // DateTime
    created: NexusGenScalars['DateTime']; // DateTime!
    current_period_end: NexusGenScalars['DateTime']; // DateTime!
    ended_at?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    metadata?: NexusGenScalars['Json'] | null; // Json
    price_id?: string | null; // String
    quantity?: number | null; // Int
    status?: NexusGenEnums['subscription_status'] | null; // subscription_status
    trial_start?: NexusGenScalars['DateTime'] | null; // DateTime
    user_id: string; // String!
  }
  users: { // root type
    avatar_url?: string | null; // String
    email: string; // String!
    emailVerified?: NexusGenScalars['DateTime'] | null; // DateTime
    full_name?: string | null; // String
    id: string; // ID!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createPost: NexusGenRootTypes['Post'] | null; // Post
    deletePost: NexusGenRootTypes['Post'] | null; // Post
    publishPost: NexusGenRootTypes['Post'] | null; // Post
  }
  Post: { // field return type
    content: string | null; // String
    id: number | null; // Int
    published: boolean | null; // Boolean
    title: string | null; // String
    users: NexusGenRootTypes['users'] | null; // users
  }
  Query: { // field return type
    Drafts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    Post: NexusGenRootTypes['Post'] | null; // Post
    Posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    subscriptionBy: Array<NexusGenRootTypes['subscriptions'] | null> | null; // [subscriptions]
  }
  customers: { // field return type
    id: string; // ID!
    stripe_customer_id: string | null; // String
    users: NexusGenRootTypes['users']; // users!
  }
  prices: { // field return type
    active: boolean | null; // Boolean
    currency: string | null; // String
    description: string | null; // String
    id: string; // ID!
    interval: NexusGenEnums['pricing_plan_interval'] | null; // pricing_plan_interval
    interval_count: number | null; // Int
    metadata: NexusGenScalars['Json'] | null; // Json
    product_id: string | null; // String
    products: NexusGenRootTypes['products'] | null; // products
    subscriptions: NexusGenRootTypes['subscriptions'][]; // [subscriptions!]!
    trial_period_days: number | null; // Int
    type: NexusGenEnums['pricing_type'] | null; // pricing_type
    unit_amount: NexusGenScalars['BigInt'] | null; // BigInt
  }
  products: { // field return type
    active: boolean | null; // Boolean
    description: string | null; // String
    id: string; // ID!
    image: string | null; // String
    metadata: NexusGenScalars['Json'] | null; // Json
    name: string | null; // String
    prices: NexusGenRootTypes['prices'][]; // [prices!]!
  }
  subscriptions: { // field return type
    cancel_at: NexusGenScalars['DateTime'] | null; // DateTime
    cancel_at_period_end: boolean | null; // Boolean
    canceled_at: NexusGenScalars['DateTime'] | null; // DateTime
    created: NexusGenScalars['DateTime']; // DateTime!
    current_period_end: NexusGenScalars['DateTime']; // DateTime!
    ended_at: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    metadata: NexusGenScalars['Json'] | null; // Json
    price_id: string | null; // String
    prices: NexusGenRootTypes['prices'] | null; // prices
    quantity: number | null; // Int
    status: NexusGenEnums['subscription_status'] | null; // subscription_status
    trial_start: NexusGenScalars['DateTime'] | null; // DateTime
    user_id: string; // String!
    users: NexusGenRootTypes['users']; // users!
  }
  users: { // field return type
    avatar_url: string | null; // String
    email: string; // String!
    emailVerified: NexusGenScalars['DateTime'] | null; // DateTime
    full_name: string | null; // String
    id: string; // ID!
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createPost: 'Post'
    deletePost: 'Post'
    publishPost: 'Post'
  }
  Post: { // field return type name
    content: 'String'
    id: 'Int'
    published: 'Boolean'
    title: 'String'
    users: 'users'
  }
  Query: { // field return type name
    Drafts: 'Post'
    Post: 'Post'
    Posts: 'Post'
    subscriptionBy: 'subscriptions'
  }
  customers: { // field return type name
    id: 'ID'
    stripe_customer_id: 'String'
    users: 'users'
  }
  prices: { // field return type name
    active: 'Boolean'
    currency: 'String'
    description: 'String'
    id: 'ID'
    interval: 'pricing_plan_interval'
    interval_count: 'Int'
    metadata: 'Json'
    product_id: 'String'
    products: 'products'
    subscriptions: 'subscriptions'
    trial_period_days: 'Int'
    type: 'pricing_type'
    unit_amount: 'BigInt'
  }
  products: { // field return type name
    active: 'Boolean'
    description: 'String'
    id: 'ID'
    image: 'String'
    metadata: 'Json'
    name: 'String'
    prices: 'prices'
  }
  subscriptions: { // field return type name
    cancel_at: 'DateTime'
    cancel_at_period_end: 'Boolean'
    canceled_at: 'DateTime'
    created: 'DateTime'
    current_period_end: 'DateTime'
    ended_at: 'DateTime'
    id: 'ID'
    metadata: 'Json'
    price_id: 'String'
    prices: 'prices'
    quantity: 'Int'
    status: 'subscription_status'
    trial_start: 'DateTime'
    user_id: 'String'
    users: 'users'
  }
  users: { // field return type name
    avatar_url: 'String'
    email: 'String'
    emailVerified: 'DateTime'
    full_name: 'String'
    id: 'ID'
    posts: 'Post'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPost: { // args
      content?: string | null; // String
      title?: string | null; // String
    }
    deletePost: { // args
      postId?: number | null; // Int
    }
    publishPost: { // args
      postId?: number | null; // Int
    }
  }
  Query: {
    Post: { // args
      postId: string; // String!
    }
    subscriptionBy: { // args
      userId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}